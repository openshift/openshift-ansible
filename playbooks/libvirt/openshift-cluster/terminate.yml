---
# TODO: does not handle a non-existant cluster gracefully

- name: Terminate instance(s)
  hosts: localhost
  become: no
  connection: local
  gather_facts: no
  vars_files:
  - vars.yml
  tasks:
  - set_fact: cluster_group=tag_clusterid-{{ cluster_id }}
  - add_host:
      name: "{{ item }}"
      groups: oo_hosts_to_terminate
      ansible_ssh_user: "{{ deployment_vars[deployment_type].ssh_user }}"
      ansible_sudo: "{{ deployment_vars[deployment_type].sudo }}"
    with_items: groups[cluster_group] | default([])

- name: Unsubscribe VMs
  hosts: oo_hosts_to_terminate
  vars_files:
  - vars.yml
  roles:
  - role: rhel_unsubscribe
    when: deployment_type == "enterprise" and
          ansible_distribution == "RedHat" and
          lookup('oo_option', 'rhel_skip_subscription') | default(rhsub_skip, True) |
            default('no', True) | lower in ['no', 'false']

- name: Terminate instance(s)
  hosts: localhost
  become: no
  connection: local
  gather_facts: no
  vars_files:
  - vars.yml
  tasks:
  - name: Destroy VMs
    virt:
      name: '{{ item[0] }}'
      command: '{{ item[1] }}'
      uri: '{{ libvirt_uri }}'
    with_nested:
    - groups['oo_hosts_to_terminate']
    - [ destroy, undefine ]

  - name: Delete VMs drives
    command: 'virsh -c {{ libvirt_uri }} vol-delete --pool {{ libvirt_storage_pool }} {{ item }}.qcow2'
    args:
      removes: '{{ libvirt_storage_pool_path }}/{{ item }}.qcow2'
    with_items: groups['oo_hosts_to_terminate']

  - name: Delete the VM cloud-init image
    file:
      path: '{{ libvirt_storage_pool_path }}/{{ item }}_cloud-init.iso'
      state: absent
    with_items: groups['oo_hosts_to_terminate']

  - name: Remove the cloud-init config directory
    file:
      path: '{{ libvirt_storage_pool_path }}/{{ item }}_configdrive/'
      state: absent
    with_items: groups['oo_hosts_to_terminate']

