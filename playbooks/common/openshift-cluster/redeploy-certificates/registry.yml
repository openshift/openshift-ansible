---
- name: Update registry certificates
  hosts: oo_first_master
  vars:
  roles:
  - lib_openshift
  #we need facts as we are including other role tasks
  - openshift_master_facts
  tasks:

  - set_fact:
      openshift_hosted_registry_namespace: "{{ openshift.hosted.registry.namespace | default('default') }}"
      openshift_hosted_router_create_certificate: True
      openshift_hosted_registry_cert_expire_days: 730
      openshift_hosted_registry_name: docker-registry
      openshift_hosted_registry_volumes: []
      openshift_hosted_registry_env_vars: {}
      openshift_hosted_registry_force:
      - False
      openshift_hosted_registry_edits:
      # These edits are being specified only to prevent 'changed' on rerun
      - key: spec.strategy.rollingParams
        value:
          intervalSeconds: 1
          maxSurge: "25%"
          maxUnavailable: "25%"
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        action: put

  - name: Update registry environment variables when pushing via dns
    set_fact:
      openshift_hosted_registry_env_vars: "{{ openshift_hosted_registry_env_vars | combine({'OPENSHIFT_DEFAULT_REGISTRY':'docker-registry.default.svc:5000'}) }}"
    when: openshift_push_via_dns | default(false) | bool

  - name: Update registry proxy settings for dc/docker-registry
    set_fact:
      openshift_hosted_registry_env_vars: "{{ {'HTTPS_PROXY': (openshift.common.https_proxy | default('')),
                                             'HTTP_PROXY':  (openshift.common.http_proxy  | default('')),
                                             'NO_PROXY':    (openshift.common.no_proxy    | default(''))}
                                           | combine(openshift_hosted_registry_env_vars) }}"
    when: (openshift.common.https_proxy | default(False)) or (openshift.common.http_proxy | default('')) != ''

  - name: Update openshift_hosted facts for persistent volumes
    set_fact:
      openshift_hosted_registry_volumes: "{{ openshift_hosted_registry_volumes | union(pvc_volume_mounts) }}"
    vars:
      pvc_volume_mounts:
      - name: registry-storage
        type: persistentVolumeClaim
        claim_name: "{{ openshift.hosted.registry.storage.volume.name }}-claim"
    when:
    - openshift.hosted.registry.storage.kind | default(none) in ['nfs', 'openstack', 'glusterfs']


  - name: Include openshift_hosted role secure routing
    include: roles/openshift_hosted/tasks/registry/secure.yml

  - name: Redeploy docker registry
    command: |
      oc rollout latest {{ openshift_hosted_registry_name }} \
                        --namespace {{ openshift_hosted_registry_namespace }} \
                        --config {{ openshift.common.config_base }}/master/admin.kubeconfig
    async: 600
    poll: 15
    failed_when: false

  - name: Determine the latest version of the OpenShift registry deployment
    command: |
      {{ openshift.common.client_binary }} get deploymentconfig {{ openshift_hosted_registry_name }} \
             --namespace {{ openshift_hosted_registry_namespace }} \
             --config {{ openshift.common.config_base }}/master/admin.kubeconfig \
             -o jsonpath='{ .status.latestVersion }'
    register: openshift_hosted_registry_latest_version

  - name: Sanity-check that the OpenShift registry rolled out correctly
    command: |
      {{ openshift.common.client_binary }} get replicationcontroller {{ openshift_hosted_registry_name }}-{{ openshift_hosted_registry_latest_version.stdout }} \
             --namespace {{ openshift_hosted_registry_namespace }} \
             --config {{ openshift.common.config_base }}/master/admin.kubeconfig \
             -o jsonpath='{ .metadata.annotations.openshift\.io/deployment\.phase }'
    register: openshift_hosted_registry_rc_phase
    until: "'Running' not in openshift_hosted_registry_rc_phase.stdout"
    delay: 15
    retries: 40
    failed_when: "'Failed' in openshift_hosted_registry_rc_phase.stdout"
