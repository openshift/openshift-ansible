---
- name: Populate oo_masters_to_terminate host group if needed
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Evaluate oo_host_group_exp if it's set
      add_host: "name={{ item }} groups=oo_masters_to_terminate"
      with_items: "{{ oo_host_group_exp | default('') }}"
      when: oo_host_group_exp is defined

- name: Gather facts for instances to terminate
  hosts: oo_masters_to_terminate

- name: Terminate instances
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    host_vars: "{{ hostvars
        | oo_select_keys(groups['oo_masters_to_terminate']) }}"
  tasks:
    - name: Terminate instances
      ec2:
        state: absent
        instance_ids: ["{{ item.ec2_id }}"]
        region: "{{ item.ec2_region }}"
      ignore_errors: yes
      register: ec2_term
      with_items: host_vars

    # Fail if any of the instances failed to terminate with an error other
    # than 403 Forbidden
    - fail: msg=Terminating instance {{ item.item.ec2_id }} failed with message {{ item.msg }}
      when: "item.failed and not item.msg | search(\"error: EC2ResponseError: 403 Forbidden\")"
      with_items: ec2_term.results

    - name: Stop instance if termination failed
      ec2:
        state: stopped
        instance_ids: ["{{ item.item.ec2_id }}"]
        region: "{{ item.item.ec2_region }}"
      register: ec2_stop
      when: item.failed
      with_items: ec2_term.results

    - name: Rename stopped instances
      ec2_tag: resource={{ item.item.item.ec2_id }} region={{ item.item.item.ec2_region }} state=present
      args:
        tags:
          Name: "{{ item.item.item.ec2_tag_Name }}-terminate"
      with_items: ec2_stop.results

