---
- name: Launch instance(s)
  hosts: localhost
  connection: local
  gather_facts: no

  vars:
    inst_region: us-east-1
    atomic_ami: ami-86781fee
    user_data_file: user_data.txt

  vars_files:
    - vars.yml

  tasks:
    - name: Launch instances
      ec2:
        state: present
        region: "{{ inst_region }}"
        keypair: libra
        group: ['public']
        instance_type: m3.large
        image: "{{ atomic_ami }}"
        count: "{{ oo_new_inst_names | oo_len }}"
        user_data: "{{ lookup('file', user_data_file) }}"
        wait: yes
      register: ec2

    - name: Add new instances public IPs to the atomic proxy host group
      add_host: "hostname={{ item.public_ip }} groupname=new_ec2_instances"
      with_items: ec2.instances

    - name: Add Name and environment tags to instances
      ec2_tag: "resource={{ item.1.id }} region={{ inst_region }} state=present"
      with_together:
        - oo_new_inst_names
        - ec2.instances
      args:
        tags:
          Name: "{{ item.0 }}"

    - name: Add other tags to instances
      ec2_tag: "resource={{ item.id }} region={{ inst_region }} state=present"
      with_items: ec2.instances
      args:
        tags: "{{ oo_new_inst_tags }}"

    - name: Add new instances public IPs to oo_masters_to_config
      add_host:
        hostname: "{{ item.0 }}"
        ansible_ssh_host: "{{ item.1.dns_name }}"
        groupname: oo_masters_to_config
        ec2_private_ip_address: "{{ item.1.private_ip }}"
        ec2_ip_address: "{{ item.1.public_ip }}"
      with_together:
        - oo_new_inst_names
        - ec2.instances

    - name: Wait for ssh
      wait_for: "port=22 host={{ item.dns_name }}"
      with_items: ec2.instances

    - name: Wait for root user setup
      command: "ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no -o ConnectTimeout=10 -o UserKnownHostsFile=/dev/null root@{{ item.dns_name }} echo root user is setup"
      register: result
      until: result.rc == 0
      retries: 20
      delay: 10
      with_items: ec2.instances

# Apply the configs, seprate so that just the configs can be run by themselves
- include: config.yml
