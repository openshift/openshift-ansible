---
- name: Launch instance(s)
  hosts: localhost
  become: no
  connection: local
  gather_facts: no
  vars_files:
  - vars.yml
  tasks:
  - name: Create or Update OpenStack Stack
    os_stack:
      name: openshift-ansible-{{ cluster_id }}-stack
      parameters:
        cluster_env: "{{ cluster_env }}"
        cluster_id: "{{ cluster_id }}"
        subnet_24_prefix: "{{ openstack_subnet_24_prefix }}"
        dns_nameservers: "{{ openstack_network_dns | join(',') }}"
        external_net: "{{ openstack_network_external_net }}"
        ssh_public_key: "{{ openstack_ssh_public_key }}"
        ssh_incoming: "{{ openstack_ssh_access_from }}"
        node_port_incoming: "{{ openstack_node_port_access_from }}"
        num_etcd: "{{ num_etcd }}"
        num_masters: "{{ num_masters }}"
        num_nodes: "{{ num_nodes }}"
        num_infra: "{{ num_infra }}"
        etcd_image: "{{ deployment_vars[deployment_type].image }}"
        master_image: "{{ deployment_vars[deployment_type].image }}"
        node_image: "{{ deployment_vars[deployment_type].image }}"
        infra_image: "{{ deployment_vars[deployment_type].image }}"
        etcd_flavor: "{{ openstack_flavor['etcd'] }}"
        master_flavor: "{{ openstack_flavor['master'] }}"
        node_flavor: "{{ openstack_flavor['node'] }}"
        infra_flavor: "{{ openstack_flavor['infra'] }}"
      timeout: "{{ openstack_heat_timeout }}"
      template: "{{ openstack_infra_heat_stack }}"
    register: stack_result

  - name: Add new etcd instances groups and variables
    add_host:
      hostname: '{{ item[0] }}'
      ansible_ssh_host: '{{ item[2] }}'
      ansible_ssh_user: "{{ deployment_vars[deployment_type].ssh_user }}"
      ansible_become: "{{ deployment_vars[deployment_type].become }}"
      groups: 'meta-environment_{{ cluster_env }}, meta-host-type_etcd, meta-sub-host-type_default, meta-clusterid_{{ cluster_id }}'
      openshift_node_labels:
        type: "etcd"
      openstack:
        public_v4: '{{ item[2] }}'
        private_v4: '{{ item[1] }}'
    with_together:
    - '{% for ok in stack_result["stack"]["outputs"] %}{% if ok["output_key"] == "etcd_names" %}{{ ok.output_value }}{%endif%}{%endfor%}'
    - '{% for ok in stack_result["stack"]["outputs"] %}{% if ok["output_key"] == "etcd_ips" %}{{ ok.output_value }}{%endif%}{%endfor%}'
    - '{% for ok in stack_result["stack"]["outputs"] %}{% if ok["output_key"] == "etcd_floating_ips" %}{{ ok.output_value }}{%endif%}{%endfor%}'

  - name: Add new master instances groups and variables
    add_host:
      hostname: '{{ item[0] }}'
      ansible_ssh_host: '{{ item[2] }}'
      ansible_ssh_user: "{{ deployment_vars[deployment_type].ssh_user }}"
      ansible_become: "{{ deployment_vars[deployment_type].become }}"
      groups: 'meta-environment_{{ cluster_env }}, meta-host-type_master, meta-sub-host-type_default, meta-clusterid_{{ cluster_id }}'
      openshift_node_labels:
        type: "master"
      openstack:
        public_v4: '{{ item[2] }}'
        private_v4: '{{ item[1] }}'
    with_together:
    - '{% for ok in stack_result["stack"]["outputs"] %}{% if ok["output_key"] == "master_names" %}{{ ok.output_value }}{%endif%}{%endfor%}'
    - '{% for ok in stack_result["stack"]["outputs"] %}{% if ok["output_key"] == "master_ips" %}{{ ok.output_value }}{%endif%}{%endfor%}'
    - '{% for ok in stack_result["stack"]["outputs"] %}{% if ok["output_key"] == "master_floating_ips" %}{{ ok.output_value }}{%endif%}{%endfor%}'

  - name: Add new node instances groups and variables
    add_host:
      hostname: '{{ item[0] }}'
      ansible_ssh_host: '{{ item[2] }}'
      ansible_ssh_user: "{{ deployment_vars[deployment_type].ssh_user }}"
      ansible_become: "{{ deployment_vars[deployment_type].become }}"
      groups: 'meta-environment_{{ cluster_env }}, meta-host-type_node, meta-sub-host-type_compute, meta-clusterid_{{ cluster_id }}'
      openshift_node_labels:
        type: "compute"
      openstack:
        public_v4: '{{ item[2] }}'
        private_v4: '{{ item[1] }}'
    with_together:
    - '{% for ok in stack_result["stack"]["outputs"] %}{% if ok["output_key"] == "node_names" %}{{ ok.output_value }}{%endif%}{%endfor%}'
    - '{% for ok in stack_result["stack"]["outputs"] %}{% if ok["output_key"] == "node_ips" %}{{ ok.output_value }}{%endif%}{%endfor%}'
    - '{% for ok in stack_result["stack"]["outputs"] %}{% if ok["output_key"] == "node_floating_ips" %}{{ ok.output_value }}{%endif%}{%endfor%}'

  - name: Add new infra instances groups and variables
    add_host:
      hostname: '{{ item[0] }}'
      ansible_ssh_host: '{{ item[2] }}'
      ansible_ssh_user: "{{ deployment_vars[deployment_type].ssh_user }}"
      ansible_become: "{{ deployment_vars[deployment_type].become }}"
      groups: 'meta-environment_{{ cluster_env }}, meta-host-type_node, meta-sub-host-type_infra, meta-clusterid_{{ cluster_id }}'
      openshift_node_labels:
        type: "infra"
      openstack:
        public_v4: '{{ item[2] }}'
        private_v4: '{{ item[1] }}'
    with_together:
    - '{% for ok in stack_result["stack"]["outputs"] %}{% if ok["output_key"] == "infra_names" %}{{ ok.output_value }}{%endif%}{%endfor%}'
    - '{% for ok in stack_result["stack"]["outputs"] %}{% if ok["output_key"] == "infra_ips" %}{{ ok.output_value }}{%endif%}{%endfor%}'
    - '{% for ok in stack_result["stack"]["outputs"] %}{% if ok["output_key"] == "infra_floating_ips" %}{{ ok.output_value }}{%endif%}{%endfor%}'

  - name: Wait for ssh
    wait_for:
      host: '{{ item }}'
      port: 22
    with_flattened:
    - '{% for ok in stack_result["stack"]["outputs"] %}{% if ok["output_key"] == "master_floating_ips" %}{{ ok.output_value }}{%endif%}{%endfor%}'
    - '{% for ok in stack_result["stack"]["outputs"] %}{% if ok["output_key"] == "node_floating_ips" %}{{ ok.output_value }}{%endif%}{%endfor%}'
    - '{% for ok in stack_result["stack"]["outputs"] %}{% if ok["output_key"] == "infra_floating_ips" %}{{ ok.output_value }}{%endif%}{%endfor%}'

  - name: Wait for user setup
    command: 'ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no -o ConnectTimeout=10 -o UserKnownHostsFile=/dev/null {{ deployment_vars[deployment_type].ssh_user }}@{{ item }} echo {{ deployment_vars[deployment_type].ssh_user }} user is setup'
    register: result
    until: result.rc == 0
    retries: 30
    delay: 1
    with_flattened:
    - '{% for ok in stack_result["stack"]["outputs"] %}{% if ok["output_key"] == "master_floating_ips" %}{{ ok.output_value }}{%endif%}{%endfor%}'
    - '{% for ok in stack_result["stack"]["outputs"] %}{% if ok["output_key"] == "node_floating_ips" %}{{ ok.output_value }}{%endif%}{%endfor%}'
    - '{% for ok in stack_result["stack"]["outputs"] %}{% if ok["output_key"] == "infra_floating_ips" %}{{ ok.output_value }}{%endif%}{%endfor%}'

- include: update.yml

- include: list.yml
