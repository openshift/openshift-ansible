---
# Note: this required ansible-galaxy install Azure.azure_modules

- import_playbook: prerequisites.yml

# create all the items necessary to make the VM
- name: "Create resource group"
  hosts: localhost
  gather_facts: yes
  tasks:
  - name: provision public ip address
    import_role:
      name: openshift_azure
      tasks_from: provision_instance.yml
    vars:
      openshift_azure_vm_base_image:
        name: '{{ openshift_azure_base_image }}'
        resource_group: '{{ openshift_azure_base_image_ns }}'
  - name: get the openshift registry token
    import_role:
      name: openshift_registry_token
    when:
    - oreg_auth_password is not defined
    - openshift_registry_token_api_auth_password is defined

- name: prepare node image
  hosts: nodes
  gather_facts: yes
  remote_user: "{{ openshift_azure_vm_admin_username }}"
  become: True
  tasks:
  - name: read the openshift registry token from localhost's vars
    set_fact:
      oreg_url: '{{ openshift_registry_token_url }}'
      oreg_auth_user: '{{ openshift_registry_token_auth_user }}'
      oreg_auth_password: '{{ hostvars["localhost"]["openshift_registry_token_auth_password"] }}'
    when:
    - oreg_auth_password is not defined
    - openshift_registry_token_api_auth_password is defined
  - name: set the user to perform installation
    set_fact:
      ansible_ssh_user: "{{ openshift_azure_vm_admin_username | default(ansible_ssh_user) }}"
      openshift_node_bootstrap: True
      openshift_node_image_prep_packages:
      - cloud-utils-growpart
      ansible_become: true

  - name: lay down yum certs
    copy:
      content: "{{ item.content }}"
      dest: "/var/lib/yum/{{ item.name }}"
    with_items:
    - name: client-cert.pem
      content: "{{ yum_client_cert_contents }}"
    - name: client-key.pem
      content: "{{ yum_client_key_contents }}"

- import_playbook: ../../openshift-node/private/image_prep.yml

- name: customize image for azure
  hosts: nodes
  gather_facts: yes
  remote_user: "{{ openshift_azure_vm_admin_username }}"
  become: True
  tasks:
  - name: azure customize waagent and cloud-init
    import_role:
      name: openshift_azure
      tasks_from: customize.yml

  # in order to setup the masters we need openshift_release
  #- name: import repoquery
  #  import_role:
  #    name: lib_utils

  #- name: repoquery openshift version
  #  repoquery:
  #    name: "{{ openshift_service_type }}-master"
  #    query_type: installed
  #  register: queryout

  #- name: set_fact openshift_release
  #  set_fact:
  #    openshift_release: "{{ queryout.results.versions.latest }}"

  - name: setup the system unit files
    import_role:
      name: openshift_master_facts

  - name: setup the system unit files
    import_role:
      name: openshift_master
      tasks_from: systemd_units.yml

  - name: fetch tags
    import_role:
      name: openshift_azure
      tasks_from: query_tags.yml

  - debug:
      var: openshift_azure_os_tags
      verbosity: 1

  - debug:
      var: openshift_azure_openshift_tags
      verbosity: 1

  - name: clean up tasks
    import_tasks: tasks/remove_yum.yml
# NOTE: this isn't available until ansible 2.5
# https://github.com/ansible/ansible/pull/32589
# installed from https://releases.ansible.com/ansible/rpm/nightly/devel/epel-7-x86_64/
- name: Create image
  hosts: localhost
  tasks:
  - set_fact:
      ansible_become: false
  - name: deprovision and prepare image
    import_role:
      name: openshift_azure
      tasks_from: create_image_from_vm.yml
    vars:
      openshift_azure_vm_host: "{{ groups['azure'][0] }}"
      openshift_azure_os_tags: "{{ hostvars[groups['azure'][0]]['openshift_azure_os_tags'] | default({}) }}"
      openshift_azure_openshift_tags: "{{ hostvars[groups['azure'][0]]['openshift_azure_openshift_tags'] | default({}) }}"
      openshift_azure_image_name: "{{ openshift_azure_image }}"
