---
- name: Abort when conflicting deployment type variables are set
  when:
    - deployment_type is defined
    - openshift_deployment_type is defined
    - openshift_deployment_type != deployment_type
  fail:
    msg: |-
      openshift_deployment_type is set to "{{ openshift_deployment_type }}".
      deployment_type is set to "{{ deployment_type }}".
      To avoid unexpected results, this conflict is not allowed.
      deployment_type is deprecated in favor of openshift_deployment_type.
      Please specify only openshift_deployment_type, or make both the same.

- name: Standardize on latest variable names
  set_fact:
    # goal is to deprecate deployment_type in favor of openshift_deployment_type.
    # both will be accepted for now, but code should refer to the new name.
    # TODO: once this is well-documented, add deprecation notice if using old name.
    deployment_type: "{{ openshift_deployment_type | default(deployment_type) | default | string }}"
    openshift_deployment_type: "{{ openshift_deployment_type | default(deployment_type) | default | string }}"

- name: Abort when deployment type is invalid
  # this variable is required; complain early and clearly if it is invalid.
  when: openshift_deployment_type not in known_openshift_deployment_types
  fail:
    msg: |-
      Please set openshift_deployment_type to one of:
      {{ known_openshift_deployment_types | join(', ') }}

- name: Normalize openshift_release
  set_fact:
    # Normalize release if provided, e.g. "v3.5" => "3.5"
    # Currently this is not required to be defined for all installs, and the
    # `openshift_version` role can generally figure out the specific version
    # that gets installed (e.g. 3.5.0.1). So consider this the user's expressed
    # intent (if any), not the authoritative version that will be installed.
    openshift_release: "{{ openshift_release | string | regex_replace('^v', '') }}"
  when: openshift_release is defined

- name: Abort when openshift_release is invalid
  when:
    - openshift_release is defined
    - not openshift_release | match('\d+(\.\d+){1,3}$')
  fail:
    msg: |-
      openshift_release is "{{ openshift_release }}" which is not a valid version string.
      Please set it to a version string like "3.4".

# Add additional registry configuration checks
# ================================== BOTH NFS AND GLUSTERFS ======================================
# Inventory/hosts file has both glusterfs_registry and nfs registry enabled - user should 
# choose which one they really want.
- name: Abort when both nfs and glusterfs_registry are enabled
  when:
    - "'nfs' in group_names"
    - "'glusterfs_registry' in group_names"
  fail:
    msg: |-
      Conflicting registry types are defined, 'nfs' and 'glusterfs_registry' group_names 
      are both defined in the inventory/hosts file. Please choose one or the other and rerun the playbook. 

# ============================  GLUSTERFS ====================================
# Inventory/hosts file indicates that registry storage kind is glusterfs
# but glusterfs_registry does not exist in the group_names OSEv3
# Y, NA, N
- name: Abort when registry_storage_kind is glusterfs but no groups exist
  when:
    - openshift_hosted_registry_storage_kind == 'glusterfs'
    - "'glusterfs_registry' not in group_names"
    - "'glusterfs' not in group_names"
  fail:
    msg: |-
      openshift_hosted_registry_storage_kind=glusterfs is enabled but there
      is no 'glusterfs_registry' group_name in OSEv3:children defined in the
      inventory/hosts file.  Please add 'glusterfs_registry' group_name or
      remove the [glusterfs_registry] hosts group and rerun the playbook.

# Inventory/hosts file indicates that registry storage kind is glusterfs
# and [glusterfs_registry] group exists but nfs does not exist in the group_names OSEv3
# +regstorage  +[nfs]  -nfs
# Y, Y, N
- name: Abort when registry_storage_kind is glusterfs and glusterfs_registry group is defined but no glusterfs_registry group_name exists
  when:
    - openshift_hosted_registry_storage_kind == 'glusterfs'
    - groups.glusterfs_registry is defined
    - "'glusterfs_registry' not in group_names"
  fail:
    msg: |-
      openshift_hosted_registry_storage_kind=glusterfs is enabled but there
      is no 'glusterfs_registry' group_name in OSEv3:children defined in the 
      inventory/hosts file. Please add 'glusterfs_registry' group_name to get an 
      glusterfs registry or remove the openshift_hosted_registry_storage_kind=glusterfs variable
      and [glusterfs_registry] hosts group to not install glusterfs registry and rerun the playbook.

# Inventory/hosts file indicates that registry storage kind is glusterfs
# but [glusterfs_registry] hosts group does not exist
# +regstorage  -[glusterfs_registry]  +glusterfs_registry
# Y, N, Y
- name: Abort when glusterfs_registry group and group_name are defined but registry storage does not match
  when:
    - openshift_hosted_registry_storage_kind != 'glusterfs'
    - openshift_hosted_registry_storage_kind is defined
    - groups.glusterfs_registry is defined
    - "'glusterfs_registry' in group_names"
  fail:
    msg: |-
      Conflicting registry storage kind, glusterfs_registry group_name and [glusterfs_registry] host groups are both defined 
      but existing openshift_hosted_registry_storage_kind="{{ openshift_hosted_registry_storage_kind }}" 
      does not match expected value of 'glusterfs' in the inventory/hosts file. change this variable to 
      'glusterfs' to get glusterfs registry and rerun the playbook.


# ================================= NFS ==========================================================
# Inventory/hosts file indicates that registry storage kind is nfs
# but nfs does not exist in the group_names OSEv3
# +regstorage  -[nfs]  -nfs
# Y, N, N
- name: Abort when registry_storage_kind is nfs but no nfs group_name exists
  when:
    - openshift_hosted_registry_storage_kind == 'nfs'
    - groups.nfs is not defined
    - "'nfs' not in group_names"
  fail:
    msg: |-
      openshift_hosted_registry_storage_kind=nfs is enabled but there
      is no 'nfs' group_name in OSEv3:children defined in the 
      inventory/hosts file. Please add 'nfs' group_name and [nfs] hosts group to get an 
      nfs registry or remove the openshift_hosted_registry_storage_kind=nfs variable
      to not install an nfs registry and rerun the playbook.

# Inventory/hosts file indicates that registry storage kind is nfs
# and [nfs] group exists but nfs does not exist in the group_names OSEv3
# +regstorage  +[nfs]  -nfs
# Y, Y, N
- name: Abort when registry_storage_kind is nfs and nfs group is defined but no nfs group_name exists
  when:
    - openshift_hosted_registry_storage_kind == 'nfs'
    - groups.nfs is defined
    - "'nfs' not in group_names"
  fail:
    msg: |-
      openshift_hosted_registry_storage_kind=nfs is enabled but there
      is no 'nfs' group_name in OSEv3:children defined in the 
      inventory/hosts file. Please add 'nfs' group_name to get an 
      nfs registry or remove the openshift_hosted_registry_storage_kind=nfs variable
      and [nfs] hosts group to not install nfs registry and rerun the playbook.

# Inventory/hosts file indicates that registry storage kind is nfs
# but [nfs] hosts group does not exist
# -regstorage  +[nfs]  -nfs
# N, Y, N
- name: Abort when nfs group exists but no group_name
  when:
    - openshift_hosted_registry_storage_kind is not defined
    - groups.nfs is defined
    - "'nfs' not in group_names"
  fail:
    msg: |-
      [nfs] group is defined but there
      is no 'nfs' group_name defined in the OSEv3:children 
      section of the inventory/hosts file. Please add the 'nfs' group_name 
      or remove the [nfs] hosts group and rerun the playbook.


# Inventory/hosts file has 'nfs' group_name defined in OSEv3:children
# and the [nfs] group defined
# but the openshift_hosted_registry_storage_kind=nfs does not exist
# -regstorage  +[glusterfs_registry]  +[glusterfs_registry]
# N, Y, Y
- name: Abort when nfs group and group_name is defined but registry storage does not match
  when:
    - openshift_hosted_registry_storage_kind != 'nfs'
    - openshift_hosted_registry_storage_kind is defined
    - groups.nfs is defined
    - "'nfs' in group_names"
  fail:
    msg: |-
      Conflicting registry storage kind, nfs group_name and [nfs] group are both defined 
      but existing openshift_hosted_registry_storage_kind="{{ openshift_hosted_registry_storage_kind }}" 
      does not match expected value of 'nfs' in the inventory/hosts file. Remove this variable to get 
      default nfs registry or change to 'nfs' and rerun the playbook.


