---
- name: Create heketi DB volume
  command: "heketi-cli -s http://{{ glusterfs_heketi_url }} --user admin --secret '{{ glusterfs_heketi_admin_key }}' setup-openshift-heketi-storage --listfile {{ mktemp.stdout }}/heketi-storage.json"
  register: setup_storage
  failed_when: False

# This is used in the subsequent task
- name: Copy the admin client config
  command: >
    cp {{ openshift.common.config_base }}/master/admin.kubeconfig {{ mktemp.stdout }}/admin.kubeconfig
  changed_when: False
  check_mode: no

# Need `command` here because heketi-storage.json contains multiple objects.
- name: Copy heketi DB to GlusterFS volume
  command: "{{ openshift.common.client_binary }} --config={{ mktemp.stdout }}/admin.kubeconfig create -f {{ mktemp.stdout }}/heketi-storage.json -n {{ glusterfs_namespace }}"
  when: setup_storage.rc == 0

- name: Deploy and wait
  openshift:
    project: "{{ glusterfs_namespace }}"
    timeout: "{{glusterfs_timeout}}"
    script: |

      deploy_res = oc.create_or_replace("{{ mktemp.stdout }}/heketi-storage.json")

      deploy_res.narrow("job")
          .related("pods")
          .until_any(lambda pod: pod.status.phase == "Succeeded")

      deploy_res.delete()  # Delete deploy resources

      # No need to create this template in openshift, just process it directly
      heketi_objs = oc.process("{{ openshift.common.examples_content_version }}/heketi-template.yml",
        parameters= {
          "IMAGE_NAME": "{{ glusterfs_heketi_image }}"
          "IMAGE_VERSION": "{{ glusterfs_heketi_version }}"
          "HEKETI_USER_KEY": "{{ glusterfs_heketi_user_key }}"
          "HEKETI_ADMIN_KEY": "{{ glusterfs_heketi_admin_key }}"
        }
      )

      heketi_res = oc.create_or_replace(heketi_objs)

      # Wait until heketi pod is Ready
      heketi_res.narrow("pod")
        .until_any(
          lambda pod: pod.status.conditions.can_match({"type": "Ready", "status": "True"})
        )

      # Require at least one endpoint to be ready
      heketi_res.narrow("endpoint").until_all(1, lambda ep: ep.subsets[0].addresses[0].ip != "")
      endpoint = heketi_res.narrow("endpoint").object()

      new_facts.glusterfs_heketi_url = endpoint.subsets[0].addresses[0].ip +
                                  ":" + endpoint.subsets[0].ports[0].port

- name: Verify heketi service
  command: "heketi-cli -s http://{{ glusterfs_heketi_url }} --user admin --secret '{{ glusterfs_heketi_admin_key }}' cluster list"
  changed_when: False
