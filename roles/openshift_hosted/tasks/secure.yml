---
- name: Include reencrypt route configuration
  include_tasks: secure/reencrypt.yml
  when: openshift_hosted_registry_routetermination == 'reencrypt'

- name: Include passthrough route configuration
  include_tasks: secure/passthrough.yml
  when: openshift_hosted_registry_routetermination == 'passthrough'

- name: Fetch the docker-registry route
  oc_route:
    name: docker-registry
    namespace: default
    state: list
  register: docker_registry_route

- name: Retrieve registry service for the clusterip
  oc_service:
    namespace: "{{ openshift_hosted_registry_namespace }}"
    name: docker-registry
    state: list
  register: docker_registry_service

- name: Generate self-signed docker-registry certificates
  oc_adm_ca_server_cert:
    signer_cert: "/etc/origin/master/ca.crt"
    signer_key: "/etc/origin/master/ca.key"
    signer_serial: "/etc/origin/master/ca.serial.txt"
    hostnames:
    - "{{ docker_registry_service.results.clusterip }}"
    - "{{ docker_registry_route.results[0].spec.host }}"
    - "{{ openshift_hosted_registry_name }}.default.svc"
    - "{{ openshift_hosted_registry_name }}.default.svc.{{ openshift_cluster_domain }}"
    - "{{ openshift_hosted_registry_routehost | default(False) }}"
    cert: "{{ docker_registry_cert_path }}"
    key: "{{ docker_registry_key_path }}"
    expire_days: "{{ openshift_hosted_registry_cert_expire_days }}"
  register: registry_self_cert
  when: docker_registry_self_signed

# Setting up REGISTRY_HTTP_TLS_CLIENTCAS as the cacert doesn't seem to work.
# If we need to set up a cacert, bundle it with the cert.
- when: docker_registry_cacert_path is defined
  block:
  - name: Retrieve certificate files to generate certificate bundle
    slurp:
      src: "{{ item }}"
    with_items:
    - "{{ docker_registry_cert_path }}"
    - "{{ docker_registry_cacert_path }}"
    register: certificate_files

  - name: Generate certificate bundle
    copy:
      content: "{{ certificate_files.results | map(attribute='content') | map('b64decode') | join('') }}"
      dest: "/etc/origin/master/named_certificates/docker-registry.pem"

  - name: Reset the certificate path to use the bundle
    set_fact:
      docker_registry_cert_path: "/etc/origin/master/named_certificates/docker-registry.pem"

- name: Create the secret for the registry certificates
  oc_secret:
    name: registry-certificates
    namespace: "{{ openshift_hosted_registry_namespace }}"
    files:
    - name: registry.crt
      path: "{{ docker_registry_cert_path }}"
    - name: registry.key
      path: "{{ docker_registry_key_path }}"
  register: create_registry_certificates_secret_out

- name: Add the secret to the registry's pod service accounts
  oc_serviceaccount_secret:
    service_account: "{{ item }}"
    secret: registry-certificates
    namespace: "{{ openshift_hosted_registry_namespace }}"
  with_items:
  - registry
  - default

- name: Set facts for secure registry
  set_fact:
    registry_secure_volume_mounts:
    - name: registry-certificates
      path: /etc/secrets
      type: secret
      secret_name: registry-certificates
    registry_secure_env_vars:
      REGISTRY_HTTP_TLS_CERTIFICATE: /etc/secrets/registry.crt
      REGISTRY_HTTP_TLS_KEY: /etc/secrets/registry.key
    registry_secure_edits:
    - key: spec.template.spec.containers[0].livenessProbe.httpGet.scheme
      value: HTTPS
      action: put
    - key: spec.template.spec.containers[0].readinessProbe.httpGet.scheme
      value: HTTPS
      action: put

- name: Detect if there has been certificate changes
  set_fact:
    registry_cert_changed: true
  when: ( registry_self_cert is defined and registry_self_cert.changed ) or
        create_registry_certificates_secret_out.changed

- name: Update openshift_hosted facts with secure registry variables
  set_fact:
    openshift_hosted_registry_volumes: "{{ openshift_hosted_registry_volumes | union(registry_secure_volume_mounts) }}"
    openshift_hosted_registry_env_vars: "{{ openshift_hosted_registry_env_vars | combine(registry_secure_env_vars) }}"
    openshift_hosted_registry_edits: "{{ openshift_hosted_registry_edits | union(registry_secure_edits) }}"
    openshift_hosted_registry_force: "{{ openshift_hosted_registry_force | union([registry_cert_changed | default(false)]) }}"
