---
# If provided, openshift_image_tag is preferred over openshift_release
- name: Set containerized version to configure if openshift_image_tag specified
  set_fact:
    # Expects a leading "v" in inventory, strip it off here unless
    # openshift_image_tag=latest
    openshift_version: "{{ openshift_image_tag[1:].split('-')[0] if openshift_image_tag != 'latest' else openshift_image_tag }}"
  when:
  - openshift_image_tag is defined
  - openshift_image_tag != ""
  - openshift_version is not defined or openshift_version_reinit | bool

- name: Set containerized version to configure if openshift_release specified
  set_fact:
    openshift_version: "{{ openshift_release }}"
  when:
  - openshift_release is defined
  - openshift_image_tag is not defined or openshift_image_tag == ""
  - openshift_version is not defined or openshift_version_reinit | bool

# Fall back to looking up the latest image available in configured registries
- when: openshift_version is not defined
  block:
  - name: Lookup latest containerized version if no version specified
    command: >
      docker run --rm {{ openshift_cli_image }}:latest version
    register: cli_image_version
    when:
    - not openshift_use_crio_only

  # Origin latest = pre-release version (i.e. v1.3.0-alpha.1-321-gb095e3a)
  - name: Set openshift_version to latest containerized version found (Origin)
    set_fact:
      openshift_version: "{{ (cli_image_version.stdout_lines[0].split(' ')[1].split('-')[0:2] | join('-'))[1:] }}"
    when:
    - openshift.common.deployment_type == 'origin'
    - cli_image_version.stdout_lines[0].split('-') | length > 1
    - not openshift_use_crio_only

  - name: Set openshift_version to latest containerized version found (OCP)
    set_fact:
      openshift_version: "{{ cli_image_version.stdout_lines[0].split(' ')[1].split('-')[0][1:] }}"

# If we got an openshift_version like "3.2", lookup the latest 3.2 container version
# and use that value instead.
- when:
  - openshift_version is defined
  - openshift_version.split('.') | length == 2
  block:
  # TODO: figure out a way to check for the openshift_version when using CRI-O.
  # We should do that using the images in the ostree storage so we don't have
  # to pull them again.
  - name: Lookup precise containerized version to configure if openshift_release specified
    command: >
      docker run --rm {{ openshift_cli_image }}:v{{ openshift_version }} version
    register: cli_image_version
    when:
    - not openshift_use_crio_only

  - name: Set openshift_version to precise containerized version found
    set_fact:
      openshift_version: "{{ cli_image_version.stdout_lines[0].split(' ')[1].split('-')[0:2][1:] | join('-') if openshift.common.deployment_type == 'origin' else cli_image_version.stdout_lines[0].split(' ')[1].split('-')[0][1:] }}"
    when:
    - not openshift_use_crio_only

# We finally have the specific version. Now we clean up any strange
# dangly +c0mm1t-offset tags in the version. See also,
# openshift_facts.py
- name: Remove any commit offset tags from openshift_version
  set_fact:
    openshift_version: "{{ openshift_version | lib_utils_oo_chomp_commit_offset }}"

- name: Set openshift_image_tag to match openshift_version found if openshift_image_tag was not provided
  set_fact:
    openshift_image_tag: v{{ openshift_version }}
  when: >
    openshift_image_tag is not defined or openshift_image_tag == ""
    or (openshift_image_tag is defined and openshift_image_tag.split('.') | length == 2)

- name: Set openshift_pkg_version to match openshift_version
  set_fact:
    openshift_pkg_version: -{{ openshift_version }}
  when: >
    openshift_pkg_version is not defined or openshift_pkg_version == ""
    or openshift_version not in openshift_pkg_version
#    or (openshift_pkg_version is defined and openshift_pkg_version.split('.') | length == 2)

- name: Check for available RPMs
  include_tasks: check_available_rpms.yml
  vars:
    openshift_version: "{{ openshift_pkg_version[1:].split('-')[0] }}"
  when: not openshift_is_atomic | bool
