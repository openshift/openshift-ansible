#!/bin/python

import jinja2
import yaml
import logging
from subprocess import call
import optparse

RED = '\033[91m'
GREEN = '\033[92m'
BLUE = '\033[94m'
ENDC = '\033[0m'

def setOptions():
        parser = optparse.OptionParser("%prog ")

        parser.add_option(
            "", "-n", "--name", dest="name", default = "",
            help = "Run specific task"
        )

        return parser


def renderTemplate(searchpath, template_file, template_vars):
    templateLoader = jinja2.FileSystemLoader( searchpath=searchpath )
    templateEnv = jinja2.Environment( loader=templateLoader )
    template = templateEnv.get_template( template_file )
    content = template.render( template_vars )
    return content

def runMolecule(scenario):
    vars = {
        "containers": filter(lambda l: l["name"] in scenario["containers"], data["containers"]),
        "vars": scenario["vars"],
        "playbook": "" if "playbook" not in scenario else scenario["playbook"],
    }

    output = renderTemplate(".", "molecule.yml.j2", vars)
    # yaml formatting
    output = yaml.load(output)
    with open("molecule.yml", "w") as f:
         yaml.dump(output, f, default_flow_style=False)

    return call("molecule test", shell=True)

if __name__ == "__main__":
    options, args = setOptions().parse_args()

    try:
        with open("scenarios.yml", "r") as f:
            data = yaml.load(f)
    except IOError as e:
        logging.error("Unable to find scenarios.yml. Exiting due to %s" % e)
        exit(1)

    results = {}

    found = False
    for scenario in data["scenarios"]:
        if scenario["name"] != "" and scenario["name"] != options.name:
            continue

        rc = runMolecule(scenario)
        print "RC: %s" % rc
        if rc == 0:
            results[scenario["name"]] = True
        else:
            results[scenario["name"]] = False

        if scenario["name"] != "" and scenario["name"] == options.name:
            found = True
            break

    if not found:
        logging.error("Scenario %s not found", options.name)
        exit(3)

    failed = False
    passed = 0
    for name in results:
        if results[name]:
            print "%sScenario %s passed%s" % (GREEN, name, ENDC)
            passed = passed + 1
        else:
            print "%sScenario %s failed%s" % (RED, name, ENDC)
            failsed = True

    if options.name == "":
        print "%s%s/%s passed%s" % (BLUE, passed, len(results), ENDC)
    else:
        print "%s1 passed, %s skipped%s" % (BLUE, len(results) - 1, ENDC)

    if failed:
        exit(2)
