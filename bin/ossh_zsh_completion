#compdef ossh oscp

_ossh_known_hosts(){
    if python -c 'import openshift_ansible' &>/dev/null; then
      print $(/usr/bin/python -c 'from openshift_ansible import multi_ec2; m=multi_ec2.MultiEc2(); m.run(); z=m.result; print "\n".join(["%s.%s" % (host["ec2_tag_Name"],host["ec2_tag_environment"]) for dns, host in z["_meta"]["hostvars"].items() if all(k in host for k in ("ec2_tag_Name", "ec2_tag_environment"))])')

    elif [[ -f /dev/shm/.ansible/tmp/multi_ec2_inventory.cache ]]; then
      print $(/usr/bin/python -c 'import json; loc="/dev/shm/.ansible/tmp/multi_ec2_inventory.cache"; z=json.loads(open(loc).read()); print "\n".join(["%s.%s" % (host["ec2_tag_Name"],host["ec2_tag_environment"]) for dns, host in z["_meta"]["hostvars"].items() if all(k in host for k in ("ec2_tag_Name", "ec2_tag_environment"))])')

    elif [[ -f ~/.ansible/tmp/multi_ec2_inventory.cache ]]; then
      print $(/usr/bin/python -c 'import json,os; loc="%s" % os.path.expanduser("~/.ansible/tmp/multi_ec2_inventory.cache"); z=json.loads(open(loc).read()); print "\n".join(["%s.%s" % (host["ec2_tag_Name"],host["ec2_tag_environment"]) for dns, host in z["_meta"]["hostvars"].items() if all(k in host for k in ("ec2_tag_Name", "ec2_tag_environment"))])')

    fi

}
_ossh(){
  local curcontext="$curcontext" state line
  typeset -A opt_args

#_arguments "*:Hosts:_ossh_known_hosts"
    _arguments -s : \
        "*:hosts:->hosts"

    case "$state" in
        hosts)
            _values 'hosts' $(_ossh_known_hosts)
            ;;
    esac

}
_ossh "$@"
